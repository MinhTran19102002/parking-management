version: '3.4'

services:
  mongodb:
    image: mongo
    container_name: my-mongodb
    ports:
      - "27087:27087"
    networks:
      - db
  data-importer:
    image: mongo
    container_name: data-importer
    volumes:
      - ./database:/database
    command: bash -c "sleep 10 && mongoimport --host mongodb --db paking-management --collection event --file /database/event.json --jsonArray && mongoimport --host mongodb --db paking-management --collection parking --file /database/parking.json --jsonArray && mongoimport --host mongodb --db paking-management --collection parkingTurn --file /database/parkingTurn.json --jsonArray && mongoimport --host mongodb --db paking-management --collection persons --file /database/persons.json --jsonArray && mongoimport --host mongodb --db paking-management --collection vehicles --file /database/vehicles.json --jsonArray  && mongoimport --host mongodb --db paking-management --collection station --file /database/station.json --jsonArray && mongoimport --host mongodb --db paking-management --collection camera --file /database/camera.json --jsonArray && mongoimport --host mongodb --db paking-management --collection config --file /database/config.json --jsonArray && mongoimport --host mongodb --db paking-management --collection deparment --file /database/deparment.json --jsonArray && mongoimport --host mongodb --db paking-management --collection payment --file /database/payment.json --jsonArray"
    depends_on:
      - mongodb
    networks:
      - db
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    networks:
      - db
    ports:
      - 8010:8010
    environment:
      MONGODB_URI: mongodb://mongodb/
    expose:
      - 8010
    depends_on:
      - mongodb
      - data-importer
    
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 10048:5173
    networks:
      - db
    depends_on:
      - backend

  # rtmp-to-hls:
  #   build: ./rtmp-to-hls
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./hls:/usr/share/nginx/html/hls
  #   networks:
  #     - db

  web_out_in_parking:
    build: ./service-in-out
    ports:
      - "5000:5000"
    expose:
      - 5000
    environment:
      APP_HOST: /api
    restart: always
    networks:
      - db
    depends_on:
      - backend

  # media-server:
  #   image: jrottenberg/ffmpeg:4.4-scratch
  #   container_name: ffmpeg
  #   command:
  #     [
  #       "-i",
  #       "rtmp://103.130.211.150:10050/stream",
  #       "-c:v",
  #       "libx264",
  #       "-c:a",
  #       "aac",
  #       "-strict",
  #       "-2",
  #       "-f",
  #       "hls",
  #       "-hls_time",
  #       "10",
  #       "-hls_list_size",
  #       "10",
  #       "-hls_flags",
  #       "delete_segments",
  #       "-hls_segment_filename",
  #       "/mnt/hls/segment_%01d.ts",
  #       "/mnt/hls/index.m3u8"
  #     ]
  #   volumes:
  #     - type: bind
  #       source: ./media-server/hls
  #       target: /mnt/hls
  #   depends_on:
  #     - nginx
  #   networks:
  #     - db
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "88:88"
    volumes:
      - ./media-server/nginx.conf:/etc/nginx/nginx.conf
      - ./media-server/hls:/usr/share/nginx/html/hls
    networks:
      - db

networks:
  db:
    driver: bridge
